# app.py - Optimized Version
import nest_asyncio
nest_asyncio.apply()

import streamlit as st
import logging
from src.error_handler import safe_execute, handle_errors

# Lazy imports ƒë·ªÉ gi·∫£m th·ªùi gian kh·ªüi ƒë·ªông
@st.cache_resource
def get_components():
    from src.auth import display_auth_form
    from src.chatbot_ui import display_chatbot_interface
    from src.admin_ui import display_admin_interface
    from src.dashboard_ui import display_dashboard
    from src.profile_ui import display_profile_interface
    from src.rag_components import load_base_components
    return {
        'auth': display_auth_form,
        'chatbot': display_chatbot_interface,
        'admin': display_admin_interface,
        'dashboard': display_dashboard,
        'profile': display_profile_interface,
        'components': load_base_components
    }

st.set_page_config(
	page_title="CS50 & L·ªãch s·ª≠ Chatbot",
	page_icon="ü§ñ",
	layout="wide",
	menu_items={
		"Get help": "https://docs.streamlit.io/",
		"Report a bug": "https://github.com/streamlit/streamlit/issues",
		"About": "Tr·ª£ l√Ω h·ªçc t·∫≠p CS50 & L·ªãch s·ª≠ ‚Äî x√¢y d·ª±ng v·ªõi Streamlit"
	}
)

# T·∫£i components v·ªõi error handling
components = safe_execute(get_components, {}, "L·ªói t·∫£i components")
if not components:
    st.error("Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông ·ª©ng d·ª•ng")
    st.stop()

# T·∫£i RAG components v·ªõi lazy loading
def get_app_data():
    return safe_execute(components['components'], (None, None, None), "L·ªói t·∫£i d·ªØ li·ªáu")

vector_stores, prompt, supabase_client = get_app_data()

# Session state v·ªõi t·ªëi ∆∞u
if 'user_session' not in st.session_state:
    st.session_state['user_session'] = None

# Logic ƒëi·ªÅu h∆∞·ªõng ƒë∆∞·ª£c t·ªëi ∆∞u
if st.session_state['user_session'] is None:
    safe_execute(
        lambda: components['auth'](supabase_client),
        None,
        "L·ªói hi·ªÉn th·ªã form ƒëƒÉng nh·∫≠p"
    )
else:
    user = st.session_state['user_session'].user
    user_id = user.id
    user_name = user.user_metadata.get('full_name', 'Ng∆∞·ªùi d√πng')
    user_email = user.email

    # Sidebar t·ªëi ∆∞u
    st.sidebar.title("üõ†Ô∏è B·∫£ng ƒêi·ªÅu Khi·ªÉn")
    
    ADMIN_EMAIL = "duy@gmail.com"
    is_admin = user_email == ADMIN_EMAIL

    # Menu options
    options = ["Chatbot", "Trang c√° nh√¢n"]
    if is_admin:
        options.extend(["Qu·∫£n tr·ªã vi√™n", "Dashboard"])
    
    app_mode = st.sidebar.radio("Ch·ªçn trang:", options, key="app_mode")
    st.sidebar.divider()

    # Route v·ªõi error handling
    if app_mode == "Chatbot":
        safe_execute(
            lambda: components['chatbot'](vector_stores, prompt, supabase_client, user_id, user_name),
            None,
            "L·ªói t·∫£i chatbot"
        )
    elif app_mode == "Trang c√° nh√¢n":
        safe_execute(
            lambda: components['profile'](supabase_client, user),
            None,
            "L·ªói t·∫£i trang c√° nh√¢n"
        )
    elif app_mode == "Qu·∫£n tr·ªã vi√™n" and is_admin:
        safe_execute(components['admin'], None, "L·ªói t·∫£i trang qu·∫£n tr·ªã")
    elif app_mode == "Dashboard" and is_admin:
        safe_execute(
            lambda: components['dashboard'](supabase_client),
            None,
            "L·ªói t·∫£i dashboard"
        )