import streamlit as st
import os
import shutil
from src.error_handler import handle_errors, safe_execute
from src.db_builder import build_vector_store

def display_admin_interface():
    """Hi·ªÉn th·ªã giao di·ªán qu·∫£n tr·ªã ƒë·ªÉ qu·∫£n l√Ω c√°c b·ªô ki·∫øn th·ª©c."""
    st.title("üîë Trang Qu·∫£n Tr·ªã")
    st.markdown("---_---")
    st.header("üìö Th√™m B·ªô Ki·∫øn Th·ª©c M·ªõi")

    # Form ƒë·ªÉ th√™m ki·∫øn th·ª©c m·ªõi
    with st.form("new_knowledge_base_form", clear_on_submit=True):
        col1, col2 = st.columns([1, 2])
        with col1:
            knowledge_base_name = st.text_input(
                "**T√™n b·ªô ki·∫øn th·ª©c**",
                placeholder="V√≠ d·ª•: Kinh t·∫ø h·ªçc vƒ© m√¥",
                help="ƒê·∫∑t t√™n ng·∫Øn g·ªçn, kh√¥ng d·∫•u, kh√¥ng kho·∫£ng tr·∫Øng. V√≠ d·ª•: 'KinhTeHoc'"
            )
        with col2:
            uploaded_files = st.file_uploader(
                "**T·∫£i l√™n t√†i li·ªáu (.txt, .pdf, .md)**",
                accept_multiple_files=True,
                type=["txt", "pdf", "md"]
            )

        submitted = st.form_submit_button("üöÄ B·∫Øt ƒë·∫ßu x√¢y d·ª±ng Vector Store")

        if submitted:
            if not knowledge_base_name:
                st.error("Vui l√≤ng nh·∫≠p t√™n cho b·ªô ki·∫øn th·ª©c.")
            elif not uploaded_files:
                st.error("Vui l√≤ng t·∫£i l√™n √≠t nh·∫•t m·ªôt t√†i li·ªáu.")
            else:
                with st.spinner(f"ƒêang x·ª≠ l√Ω {len(uploaded_files)} t·ªáp cho b·ªô ki·∫øn th·ª©c '{knowledge_base_name}'..."):
                    success = build_vector_store(knowledge_base_name, uploaded_files)
                    if success:
                        st.success(f"ƒê√£ t·∫°o th√†nh c√¥ng b·ªô ki·∫øn th·ª©c '{knowledge_base_name}'!")
                        st.balloons()
                    else:
                        st.error(f"X·∫£y ra l·ªói khi t·∫°o b·ªô ki·∫øn th·ª©c '{knowledge_base_name}'. Vui l√≤ng ki·ªÉm tra logs.")

    st.markdown("---_---")
    st.header("üóÇÔ∏è C√°c B·ªô Ki·∫øn Th·ª©c Hi·ªán C√≥")

    vector_store_path = "vectorstore_google"
    if os.path.exists(vector_store_path) and os.path.isdir(vector_store_path):
        knowledge_bases = [d for d in os.listdir(vector_store_path) if os.path.isdir(os.path.join(vector_store_path, d))]
        
        if not knowledge_bases:
            st.info("Ch∆∞a c√≥ b·ªô ki·∫øn th·ª©c n√†o ƒë∆∞·ª£c t·∫°o.")
        else:
            st.markdown("D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c b·ªô ki·∫øn th·ª©c ƒë√£ ƒë∆∞·ª£c t·∫°o:")
            for kb_name in sorted(knowledge_bases):
                with st.container():
                    col1, col2 = st.columns([4, 1])
                    with col1:
                        st.markdown(f"- **{kb_name}**")
                    with col2:
                        if st.button("üóëÔ∏è X√≥a", key=f"delete_{kb_name}", help=f"X√≥a vƒ©nh vi·ªÖn b·ªô ki·∫øn th·ª©c {kb_name}"):
                            # Use session state to manage confirmation for each KB
                            st.session_state[f'confirm_delete_{kb_name}'] = True
                
                # Show confirmation dialog if requested
                if st.session_state.get(f'confirm_delete_{kb_name}'):
                    with st.expander(f"**X√°c nh·∫≠n x√≥a '{kb_name}'?**", expanded=True):
                        st.warning(f"H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c. To√†n b·ªô d·ªØ li·ªáu c·ªßa **{kb_name}** s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn.")
                        col_confirm, col_cancel = st.columns(2)
                        with col_confirm:
                            if st.button("üî¥ C√≥, t√¥i ch·∫Øc ch·∫Øn", key=f"confirm_btn_{kb_name}"):
                                kb_path = os.path.join(vector_store_path, kb_name)
                                try:
                                    shutil.rmtree(kb_path)
                                    st.success(f"ƒê√£ x√≥a th√†nh c√¥ng b·ªô ki·∫øn th·ª©c '{kb_name}'.")
                                    del st.session_state[f'confirm_delete_{kb_name}'] # Clean up session state
                                    st.rerun()
                                except Exception as e:
                                    st.error(f"L·ªói khi x√≥a th∆∞ m·ª•c: {e}")
                        with col_cancel:
                            if st.button("H·ªßy", key=f"cancel_btn_{kb_name}"):
                                del st.session_state[f'confirm_delete_{kb_name}'] # Clean up session state
                                st.rerun()
    else:
        st.warning(f"Th∆∞ m·ª•c '{vector_store_path}' kh√¥ng t·ªìn t·∫°i. Vui l√≤ng t·∫°o b·ªô ki·∫øn th·ª©c ƒë·∫ßu ti√™n.")

# To run this page directly for testing:
if __name__ == "__main__":
    display_admin_interface()
